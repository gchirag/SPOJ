#include<stdio.h>
#include<stdlib.h>

struct node
{
int val;
struct node* left;
struct node* right;
};

struct node * newnode(int data)
{
	struct node* node=(struct node*) malloc(sizeof(struct node));
	node->val=data;
	node->left=NULL;
	node->right=NULL;

	return node;
};

int univaluedsubtrees(struct node* node)
{
	if(node == NULL) return 0;
	if(node->left == NULL && node->right == NULL) return 1;
	int a = univaluedsubtrees(node->left);
	int b = univaluedsubtrees(node->right);
	
	if(a==1 && b==1)
	    if(node->left->val == node->right->val && node->val == node->left->val)
	        return 1;
		else return 2;
	else return a+b;
}

int main()
{
	struct node* root = newnode(1);
	root->left = newnode(1);
	root->right = newnode(1);

	root->left->left=newnode(1);
	root->left->right = newnode(2);

	root->right->left=newnode(1);
	root->right->right=newnode(2);
	
	root->left->left->left=newnode(1);
	root->left->left->right=newnode(1);
	
	root->left->right->left=newnode(2);
	root->left->right->left=newnode(2);
	
 	root->right->left->left=newnode(1);
	root->right->left->right=newnode(1);

	root->right->right->left=newnode(2);
	root->right->right->left=newnode(2);


	printf("%d\n",univaluedsubtrees(root));

system("PAUSE");
}
